
//------> ./rtl.v 
// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2022.2_1/1019737 Production Release
//  HLS Date:       Mon Nov 21 20:05:27 PST 2022
// 
//  Generated by:   HLS_student@localhost.localdomain
//  Generated date: Tue Feb 11 14:51:07 2025
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    top_level_FIR_FILTER
// ------------------------------------------------------------------


module top_level_FIR_FILTER (
  clk, rst, data_in, valid_in, coeffs_0, coeffs_1, coeffs_2, coeffs_3, coeffs_4,
      coeffs_5, coeffs_6, coeffs_7, coeffs_8, coeffs_9, coeffs_10, coeffs_11, coeffs_12,
      coeffs_13, coeffs_14, coeffs_15, data_out, valid_out
);
  input clk;
  input rst;
  input [23:0] data_in;
  input valid_in;
  input [23:0] coeffs_0;
  input [23:0] coeffs_1;
  input [23:0] coeffs_2;
  input [23:0] coeffs_3;
  input [23:0] coeffs_4;
  input [23:0] coeffs_5;
  input [23:0] coeffs_6;
  input [23:0] coeffs_7;
  input [23:0] coeffs_8;
  input [23:0] coeffs_9;
  input [23:0] coeffs_10;
  input [23:0] coeffs_11;
  input [23:0] coeffs_12;
  input [23:0] coeffs_13;
  input [23:0] coeffs_14;
  input [23:0] coeffs_15;
  output [23:0] data_out;
  output valid_out;
  reg valid_out;


  // Interconnect Declarations
  reg while_if_slc_while_if_acc_sat_29_3;
  reg [21:0] while_if_while_if_nor_3;
  reg while_if_while_if_nor_4;
  wire or_dcpl_2;
  reg new_sample_wr_sva;
  wire [51:0] acc_sva_1;
  wire [52:0] nl_acc_sva_1;
  wire while_land_lpi_1_dfm_1;
  reg while_land_lpi_1_dfm_st_1;
  reg while_stage_0_2;
  reg while_stage_0_3;
  reg while_land_lpi_1_dfm_st_2;
  reg while_else_land_lpi_1_dfm_st_2;
  wire [29:0] while_if_acc_sat_sva_1;
  wire [30:0] nl_while_if_acc_sat_sva_1;
  wire while_else_land_lpi_1_dfm_mx0w0;
  reg reg_while_else_land_lpi_1_dfm_cse;
  wire or_cse;
  reg [23:0] taps_7_sva;
  reg [23:0] taps_8_sva;
  reg [23:0] taps_6_sva;
  reg [23:0] taps_9_sva;
  reg [23:0] taps_5_sva;
  reg [23:0] taps_10_sva;
  reg [23:0] taps_4_sva;
  reg [23:0] taps_11_sva;
  reg [23:0] taps_3_sva;
  reg [23:0] taps_12_sva;
  reg [23:0] taps_2_sva;
  reg [23:0] taps_13_sva;
  reg [23:0] taps_1_sva;
  reg [23:0] taps_14_sva;
  reg [23:0] taps_0_sva;
  reg [47:0] MAC_15_mul_itm_1;
  reg [47:0] MAC_16_mul_itm_1;
  reg [47:0] MAC_13_mul_itm_1;
  reg [47:0] MAC_14_mul_itm_1;
  reg [47:0] MAC_11_mul_itm_1;
  reg [47:0] MAC_12_mul_itm_1;
  reg [47:0] MAC_9_mul_itm_1;
  reg [47:0] MAC_10_mul_itm_1;
  reg [50:0] MAC_acc_18_itm_1;
  wire [53:0] nl_MAC_acc_18_itm_1;
  reg [47:0] MAC_7_mul_itm_1;
  reg [47:0] MAC_8_mul_itm_1;
  reg [47:0] MAC_5_mul_itm_1;
  reg [47:0] MAC_6_mul_itm_1;
  reg [47:0] MAC_3_mul_itm_1;
  reg [47:0] MAC_4_mul_itm_1;
  reg [47:0] MAC_1_mul_itm_1;
  reg [47:0] MAC_2_mul_itm_1;
  reg [50:0] MAC_acc_itm_1;
  wire [53:0] nl_MAC_acc_itm_1;
  wire valid_out_mx0c1;
  wire while_if_nor_ovfl_sva_1;
  wire while_if_and_unfl_sva_1;

  wire[21:0] while_if_nor_3_nl;
  wire while_if_and_nl;

  // Interconnect Declarations for Component Instantiations 
  assign data_out = {while_if_slc_while_if_acc_sat_29_3 , while_if_while_if_nor_3
      , while_if_while_if_nor_4};
  assign while_if_and_nl = (acc_sva_1[22]) & ((acc_sva_1[0]) | (acc_sva_1[1]) | (acc_sva_1[2])
      | (acc_sva_1[3]) | (acc_sva_1[4]) | (acc_sva_1[5]) | (acc_sva_1[6]) | (acc_sva_1[7])
      | (acc_sva_1[8]) | (acc_sva_1[9]) | (acc_sva_1[10]) | (acc_sva_1[11]) | (acc_sva_1[12])
      | (acc_sva_1[13]) | (acc_sva_1[14]) | (acc_sva_1[15]) | (acc_sva_1[16]) | (acc_sva_1[17])
      | (acc_sva_1[18]) | (acc_sva_1[19]) | (acc_sva_1[20]) | (acc_sva_1[21]) | (~
      (acc_sva_1[51])));
  assign nl_while_if_acc_sat_sva_1 = conv_s2s_29_30(acc_sva_1[51:23]) + conv_u2s_1_30(while_if_and_nl);
  assign while_if_acc_sat_sva_1 = nl_while_if_acc_sat_sva_1[29:0];
  assign while_if_nor_ovfl_sva_1 = ~((while_if_acc_sat_sva_1[29]) | (~((while_if_acc_sat_sva_1[28:23]!=6'b000000))));
  assign while_if_and_unfl_sva_1 = (while_if_acc_sat_sva_1[29]) & (~((while_if_acc_sat_sva_1[28:23]==6'b111111)));
  assign nl_acc_sva_1 = conv_s2s_51_52(MAC_acc_18_itm_1) + conv_s2s_51_52(MAC_acc_itm_1);
  assign acc_sva_1 = nl_acc_sva_1[51:0];
  assign while_land_lpi_1_dfm_1 = valid_in & (~ new_sample_wr_sva);
  assign while_else_land_lpi_1_dfm_mx0w0 = (~ valid_in) & new_sample_wr_sva;
  assign or_cse = (~ valid_in) | new_sample_wr_sva;
  assign or_dcpl_2 = ~(while_stage_0_3 & while_land_lpi_1_dfm_st_2);
  assign valid_out_mx0c1 = while_stage_0_3 & while_else_land_lpi_1_dfm_st_2 & (~
      while_land_lpi_1_dfm_st_2);
  always @(posedge clk) begin
    if ( rst ) begin
      valid_out <= 1'b0;
    end
    else if ( (while_stage_0_3 & while_land_lpi_1_dfm_st_2) | valid_out_mx0c1 ) begin
      valid_out <= ~ valid_out_mx0c1;
    end
  end
  always @(posedge clk) begin
    if ( ~ or_dcpl_2 ) begin
      while_if_slc_while_if_acc_sat_29_3 <= while_if_acc_sat_sva_1[29];
    end
  end
  always @(posedge clk) begin
    if ( ~ or_dcpl_2 ) begin
      while_if_while_if_nor_3 <= ~(MUX_v_22_2_2(while_if_nor_3_nl, 22'b1111111111111111111111,
          while_if_and_unfl_sva_1));
    end
  end
  always @(posedge clk) begin
    if ( ~ or_dcpl_2 ) begin
      while_if_while_if_nor_4 <= ~((~((while_if_acc_sat_sva_1[0]) | while_if_nor_ovfl_sva_1))
          | while_if_and_unfl_sva_1);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      while_else_land_lpi_1_dfm_st_2 <= 1'b0;
      while_land_lpi_1_dfm_st_2 <= 1'b0;
      while_land_lpi_1_dfm_st_1 <= 1'b0;
      new_sample_wr_sva <= 1'b0;
      while_stage_0_2 <= 1'b0;
      while_stage_0_3 <= 1'b0;
      reg_while_else_land_lpi_1_dfm_cse <= 1'b0;
    end
    else begin
      while_else_land_lpi_1_dfm_st_2 <= reg_while_else_land_lpi_1_dfm_cse;
      while_land_lpi_1_dfm_st_2 <= while_land_lpi_1_dfm_st_1;
      while_land_lpi_1_dfm_st_1 <= while_land_lpi_1_dfm_1;
      new_sample_wr_sva <= (new_sample_wr_sva & (~ while_else_land_lpi_1_dfm_mx0w0))
          | while_land_lpi_1_dfm_1;
      while_stage_0_2 <= 1'b1;
      while_stage_0_3 <= while_stage_0_2;
      reg_while_else_land_lpi_1_dfm_cse <= while_else_land_lpi_1_dfm_mx0w0;
    end
  end
  always @(posedge clk) begin
    MAC_acc_18_itm_1 <= nl_MAC_acc_18_itm_1[50:0];
    MAC_acc_itm_1 <= nl_MAC_acc_itm_1[50:0];
    MAC_7_mul_itm_1 <= $signed(coeffs_6) * $signed(taps_5_sva);
    MAC_8_mul_itm_1 <= $signed(coeffs_7) * $signed(taps_6_sva);
    MAC_5_mul_itm_1 <= $signed(coeffs_4) * $signed(taps_3_sva);
    MAC_6_mul_itm_1 <= $signed(coeffs_5) * $signed(taps_4_sva);
    MAC_3_mul_itm_1 <= $signed(coeffs_2) * $signed(taps_1_sva);
    MAC_4_mul_itm_1 <= $signed(coeffs_3) * $signed(taps_2_sva);
    MAC_1_mul_itm_1 <= $signed(coeffs_0) * $signed(data_in);
    MAC_2_mul_itm_1 <= $signed(coeffs_1) * $signed(taps_0_sva);
    MAC_15_mul_itm_1 <= $signed(coeffs_14) * $signed(taps_13_sva);
    MAC_16_mul_itm_1 <= $signed(coeffs_15) * $signed(taps_14_sva);
    MAC_13_mul_itm_1 <= $signed(coeffs_12) * $signed(taps_11_sva);
    MAC_14_mul_itm_1 <= $signed(coeffs_13) * $signed(taps_12_sva);
    MAC_11_mul_itm_1 <= $signed(coeffs_10) * $signed(taps_9_sva);
    MAC_12_mul_itm_1 <= $signed(coeffs_11) * $signed(taps_10_sva);
    MAC_9_mul_itm_1 <= $signed(coeffs_8) * $signed(taps_7_sva);
    MAC_10_mul_itm_1 <= $signed(coeffs_9) * $signed(taps_8_sva);
  end
  always @(posedge clk) begin
    if ( rst ) begin
      taps_0_sva <= 24'b000000000000000000000000;
    end
    else if ( ~ or_cse ) begin
      taps_0_sva <= data_in;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      taps_2_sva <= 24'b000000000000000000000000;
    end
    else if ( ~ or_cse ) begin
      taps_2_sva <= taps_1_sva;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      taps_1_sva <= 24'b000000000000000000000000;
    end
    else if ( ~ or_cse ) begin
      taps_1_sva <= taps_0_sva;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      taps_4_sva <= 24'b000000000000000000000000;
    end
    else if ( ~ or_cse ) begin
      taps_4_sva <= taps_3_sva;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      taps_3_sva <= 24'b000000000000000000000000;
    end
    else if ( ~ or_cse ) begin
      taps_3_sva <= taps_2_sva;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      taps_6_sva <= 24'b000000000000000000000000;
    end
    else if ( ~ or_cse ) begin
      taps_6_sva <= taps_5_sva;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      taps_5_sva <= 24'b000000000000000000000000;
    end
    else if ( ~ or_cse ) begin
      taps_5_sva <= taps_4_sva;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      taps_8_sva <= 24'b000000000000000000000000;
    end
    else if ( ~ or_cse ) begin
      taps_8_sva <= taps_7_sva;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      taps_7_sva <= 24'b000000000000000000000000;
    end
    else if ( ~ or_cse ) begin
      taps_7_sva <= taps_6_sva;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      taps_10_sva <= 24'b000000000000000000000000;
    end
    else if ( ~ or_cse ) begin
      taps_10_sva <= taps_9_sva;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      taps_9_sva <= 24'b000000000000000000000000;
    end
    else if ( ~ or_cse ) begin
      taps_9_sva <= taps_8_sva;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      taps_12_sva <= 24'b000000000000000000000000;
    end
    else if ( ~ or_cse ) begin
      taps_12_sva <= taps_11_sva;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      taps_11_sva <= 24'b000000000000000000000000;
    end
    else if ( ~ or_cse ) begin
      taps_11_sva <= taps_10_sva;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      taps_14_sva <= 24'b000000000000000000000000;
    end
    else if ( ~ or_cse ) begin
      taps_14_sva <= taps_13_sva;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      taps_13_sva <= 24'b000000000000000000000000;
    end
    else if ( ~ or_cse ) begin
      taps_13_sva <= taps_12_sva;
    end
  end
  assign while_if_nor_3_nl = ~(MUX_v_22_2_2((while_if_acc_sat_sva_1[22:1]), 22'b1111111111111111111111,
      while_if_nor_ovfl_sva_1));
  assign nl_MAC_acc_18_itm_1  = conv_s2s_48_51(MAC_11_mul_itm_1) + conv_s2s_48_51(MAC_12_mul_itm_1)
      + conv_s2s_48_51(MAC_15_mul_itm_1) + conv_s2s_48_51(MAC_16_mul_itm_1) + conv_s2s_48_51(MAC_13_mul_itm_1)
      + conv_s2s_48_51(MAC_14_mul_itm_1) + conv_s2s_48_51(MAC_9_mul_itm_1) + conv_s2s_48_51(MAC_10_mul_itm_1);
  assign nl_MAC_acc_itm_1  = conv_s2s_48_51(MAC_3_mul_itm_1) + conv_s2s_48_51(MAC_4_mul_itm_1)
      + conv_s2s_48_51(MAC_7_mul_itm_1) + conv_s2s_48_51(MAC_8_mul_itm_1) + conv_s2s_48_51(MAC_5_mul_itm_1)
      + conv_s2s_48_51(MAC_6_mul_itm_1) + conv_s2s_48_51(MAC_1_mul_itm_1) + conv_s2s_48_51(MAC_2_mul_itm_1);

  function automatic [21:0] MUX_v_22_2_2;
    input [21:0] input_0;
    input [21:0] input_1;
    input  sel;
    reg [21:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_22_2_2 = result;
  end
  endfunction


  function automatic [29:0] conv_s2s_29_30 ;
    input [28:0]  vector ;
  begin
    conv_s2s_29_30 = {vector[28], vector};
  end
  endfunction


  function automatic [50:0] conv_s2s_48_51 ;
    input [47:0]  vector ;
  begin
    conv_s2s_48_51 = {{3{vector[47]}}, vector};
  end
  endfunction


  function automatic [51:0] conv_s2s_51_52 ;
    input [50:0]  vector ;
  begin
    conv_s2s_51_52 = {vector[50], vector};
  end
  endfunction


  function automatic [29:0] conv_u2s_1_30 ;
    input [0:0]  vector ;
  begin
    conv_u2s_1_30 = {{29{1'b0}}, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    top_level
// ------------------------------------------------------------------


module top_level (
  clk, rst, data_in, valid_in, coeffs_0, coeffs_1, coeffs_2, coeffs_3, coeffs_4,
      coeffs_5, coeffs_6, coeffs_7, coeffs_8, coeffs_9, coeffs_10, coeffs_11, coeffs_12,
      coeffs_13, coeffs_14, coeffs_15, data_out, valid_out
);
  input clk;
  input rst;
  input [23:0] data_in;
  input valid_in;
  input [23:0] coeffs_0;
  input [23:0] coeffs_1;
  input [23:0] coeffs_2;
  input [23:0] coeffs_3;
  input [23:0] coeffs_4;
  input [23:0] coeffs_5;
  input [23:0] coeffs_6;
  input [23:0] coeffs_7;
  input [23:0] coeffs_8;
  input [23:0] coeffs_9;
  input [23:0] coeffs_10;
  input [23:0] coeffs_11;
  input [23:0] coeffs_12;
  input [23:0] coeffs_13;
  input [23:0] coeffs_14;
  input [23:0] coeffs_15;
  output [23:0] data_out;
  output valid_out;



  // Interconnect Declarations for Component Instantiations 
  top_level_FIR_FILTER top_level_FIR_FILTER_inst (
      .clk(clk),
      .rst(rst),
      .data_in(data_in),
      .valid_in(valid_in),
      .coeffs_0(coeffs_0),
      .coeffs_1(coeffs_1),
      .coeffs_2(coeffs_2),
      .coeffs_3(coeffs_3),
      .coeffs_4(coeffs_4),
      .coeffs_5(coeffs_5),
      .coeffs_6(coeffs_6),
      .coeffs_7(coeffs_7),
      .coeffs_8(coeffs_8),
      .coeffs_9(coeffs_9),
      .coeffs_10(coeffs_10),
      .coeffs_11(coeffs_11),
      .coeffs_12(coeffs_12),
      .coeffs_13(coeffs_13),
      .coeffs_14(coeffs_14),
      .coeffs_15(coeffs_15),
      .data_out(data_out),
      .valid_out(valid_out)
    );
endmodule



