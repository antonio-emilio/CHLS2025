
//------> ./rtl.v 
// ----------------------------------------------------------------------
//  HLS HDL:        Verilog Netlister
//  HLS Version:    2022.2_1/1019737 Production Release
//  HLS Date:       Mon Nov 21 20:05:27 PST 2022
// 
//  Generated by:   HLS_student@localhost.localdomain
//  Generated date: Tue Feb 11 15:17:51 2025
// ----------------------------------------------------------------------

// 
// ------------------------------------------------------------------
//  Design Unit:    top_level_FIR_FILTER
// ------------------------------------------------------------------


module top_level_FIR_FILTER (
  clk, rst, data_in, valid_in, coeffs_0, coeffs_1, coeffs_2, coeffs_3, coeffs_4,
      coeffs_5, coeffs_6, coeffs_7, coeffs_8, coeffs_9, coeffs_10, coeffs_11, coeffs_12,
      coeffs_13, coeffs_14, coeffs_15, data_out, valid_out
);
  input clk;
  input rst;
  input [23:0] data_in;
  input valid_in;
  input [23:0] coeffs_0;
  input [23:0] coeffs_1;
  input [23:0] coeffs_2;
  input [23:0] coeffs_3;
  input [23:0] coeffs_4;
  input [23:0] coeffs_5;
  input [23:0] coeffs_6;
  input [23:0] coeffs_7;
  input [23:0] coeffs_8;
  input [23:0] coeffs_9;
  input [23:0] coeffs_10;
  input [23:0] coeffs_11;
  input [23:0] coeffs_12;
  input [23:0] coeffs_13;
  input [23:0] coeffs_14;
  input [23:0] coeffs_15;
  output [23:0] data_out;
  output valid_out;
  reg valid_out;


  // Interconnect Declarations
  reg while_if_slc_while_if_acc_sat_29_3;
  reg [21:0] while_if_while_if_nor_3;
  reg while_if_while_if_nor_4;
  wire [4:0] MAC_acc_2_tmp;
  wire [5:0] nl_MAC_acc_2_tmp;
  wire or_tmp;
  wire or_dcpl_3;
  wire or_dcpl_4;
  wire mux_tmp_9;
  reg [3:0] MAC_i_4_0_lpi_1_3_0;
  reg exitL_exit_MAC_lpi_1_dfm;
  reg exitL_exitL_exit_MAC_sva;
  reg new_sample_wr_sva;
  wire [51:0] acc_sva_2;
  wire [52:0] nl_acc_sva_2;
  wire while_asn_sft_lpi_1_dfm_st_1_mx0;
  reg MAC_i_slc_MAC_i_4_0_4_1_itm_1;
  reg while_asn_sft_lpi_1_dfm_st_1;
  reg while_stage_0_2;
  reg while_stage_0_3;
  reg MAC_i_slc_MAC_i_4_0_4_1_itm_2;
  reg while_asn_sft_lpi_1_dfm_st_2;
  reg while_else_land_lpi_1_dfm_st_2;
  reg while_asn_sft_lpi_1_dfm_2;
  wire [29:0] while_if_acc_sat_sva_1;
  wire [30:0] nl_while_if_acc_sat_sva_1;
  wire nand_2_cse;
  wire nor_cse;
  reg [51:0] acc_lpi_1;
  reg [23:0] taps_7_sva;
  reg [23:0] taps_8_sva;
  reg [23:0] taps_6_sva;
  reg [23:0] taps_9_sva;
  reg [23:0] taps_5_sva;
  reg [23:0] taps_10_sva;
  reg [23:0] taps_4_sva;
  reg [23:0] taps_11_sva;
  reg [23:0] taps_3_sva;
  reg [23:0] taps_12_sva;
  reg [23:0] taps_2_sva;
  reg [23:0] taps_13_sva;
  reg [23:0] taps_1_sva;
  reg [23:0] taps_14_sva;
  reg [23:0] taps_0_sva;
  reg [23:0] taps_15_lpi_1_dfm_1;
  reg lfst_exitL_exit_MAC_lpi_1_dfm_1;
  reg [51:0] while_while_and_itm_1;
  reg [23:0] MAC_mux1h_itm_1;
  reg [23:0] MAC_mux_8_itm_1;
  reg [47:0] MAC_mul_itm_1;
  wire valid_out_mx0c1;
  wire while_if_nor_ovfl_sva_1;
  wire while_if_and_unfl_sva_1;
  wire [3:0] MAC_i_4_0_lpi_1_dfm_3_0_1;
  wire exitL_exit_MAC_lpi_1_dfm_1;
  wire [51:0] acc_lpi_1_mx0;
  wire while_else_land_lpi_1_dfm_mx0w1;

  wire[21:0] while_if_nor_3_nl;
  wire while_while_or_1_nl;
  wire while_else_while_else_and_1_nl;
  wire mux_8_nl;
  wire or_11_nl;
  wire[23:0] while_mux_43_nl;
  wire[23:0] while_mux_44_nl;
  wire[23:0] while_mux_45_nl;
  wire[23:0] while_mux_3_nl;
  wire[23:0] while_mux_4_nl;
  wire[23:0] while_mux_5_nl;
  wire[23:0] while_mux_6_nl;
  wire[23:0] while_mux_7_nl;
  wire[23:0] while_mux_8_nl;
  wire[23:0] while_mux_9_nl;
  wire[23:0] while_mux_10_nl;
  wire[23:0] while_mux_11_nl;
  wire[23:0] while_mux_12_nl;
  wire[23:0] while_mux_13_nl;
  wire[23:0] while_mux_14_nl;
  wire[23:0] while_mux_15_nl;
  wire while_if_and_nl;
  wire while_if_while_if_and_nl;
  wire nand_3_nl;

  // Interconnect Declarations for Component Instantiations 
  assign data_out = {while_if_slc_while_if_acc_sat_29_3 , while_if_while_if_nor_3
      , while_if_while_if_nor_4};
  assign nand_2_cse = ~(while_asn_sft_lpi_1_dfm_st_1 & while_stage_0_2);
  assign nor_cse = ~(exitL_exit_MAC_lpi_1_dfm | exitL_exitL_exit_MAC_sva);
  assign while_if_and_nl = (acc_sva_2[22]) & ((acc_sva_2[0]) | (acc_sva_2[1]) | (acc_sva_2[2])
      | (acc_sva_2[3]) | (acc_sva_2[4]) | (acc_sva_2[5]) | (acc_sva_2[6]) | (acc_sva_2[7])
      | (acc_sva_2[8]) | (acc_sva_2[9]) | (acc_sva_2[10]) | (acc_sva_2[11]) | (acc_sva_2[12])
      | (acc_sva_2[13]) | (acc_sva_2[14]) | (acc_sva_2[15]) | (acc_sva_2[16]) | (acc_sva_2[17])
      | (acc_sva_2[18]) | (acc_sva_2[19]) | (acc_sva_2[20]) | (acc_sva_2[21]) | (~
      (acc_sva_2[51])));
  assign nl_while_if_acc_sat_sva_1 = conv_s2s_29_30(acc_sva_2[51:23]) + conv_u2s_1_30(while_if_and_nl);
  assign while_if_acc_sat_sva_1 = nl_while_if_acc_sat_sva_1[29:0];
  assign while_if_nor_ovfl_sva_1 = ~((while_if_acc_sat_sva_1[29]) | (~((while_if_acc_sat_sva_1[28:23]!=6'b000000))));
  assign while_if_and_unfl_sva_1 = (while_if_acc_sat_sva_1[29]) & (~((while_if_acc_sat_sva_1[28:23]==6'b111111)));
  assign nl_acc_sva_2 = while_while_and_itm_1 + conv_s2s_48_52(MAC_mul_itm_1);
  assign acc_sva_2 = nl_acc_sva_2[51:0];
  assign MAC_i_4_0_lpi_1_dfm_3_0_1 = MUX_v_4_2_2(4'b0000, MAC_i_4_0_lpi_1_3_0, nor_cse);
  assign while_if_while_if_and_nl = valid_in & (~ new_sample_wr_sva);
  assign while_asn_sft_lpi_1_dfm_st_1_mx0 = MUX_s_1_2_2(while_asn_sft_lpi_1_dfm_st_1,
      while_if_while_if_and_nl, or_dcpl_4);
  assign exitL_exit_MAC_lpi_1_dfm_1 = (MAC_acc_2_tmp[4]) | (~ while_asn_sft_lpi_1_dfm_st_1_mx0);
  assign nand_3_nl = ~(while_stage_0_3 & while_asn_sft_lpi_1_dfm_2);
  assign acc_lpi_1_mx0 = MUX_v_52_2_2(acc_sva_2, acc_lpi_1, nand_3_nl);
  assign while_else_land_lpi_1_dfm_mx0w1 = (~ valid_in) & new_sample_wr_sva;
  assign nl_MAC_acc_2_tmp = conv_u2s_4_5(MAC_i_4_0_lpi_1_dfm_3_0_1) + 5'b00001;
  assign MAC_acc_2_tmp = nl_MAC_acc_2_tmp[4:0];
  assign or_tmp = new_sample_wr_sva | (~ valid_in);
  assign or_dcpl_3 = ~(while_stage_0_3 & MAC_i_slc_MAC_i_4_0_4_1_itm_2 & while_asn_sft_lpi_1_dfm_st_2);
  assign or_dcpl_4 = exitL_exit_MAC_lpi_1_dfm | exitL_exitL_exit_MAC_sva;
  assign mux_tmp_9 = MUX_s_1_2_2((~ exitL_exit_MAC_lpi_1_dfm), or_tmp, exitL_exitL_exit_MAC_sva);
  assign valid_out_mx0c1 = while_stage_0_3 & while_else_land_lpi_1_dfm_st_2 & (~
      while_asn_sft_lpi_1_dfm_st_2);
  always @(posedge clk) begin
    if ( rst ) begin
      valid_out <= 1'b0;
    end
    else if ( (while_stage_0_3 & MAC_i_slc_MAC_i_4_0_4_1_itm_2 & while_asn_sft_lpi_1_dfm_st_2)
        | valid_out_mx0c1 ) begin
      valid_out <= ~ valid_out_mx0c1;
    end
  end
  always @(posedge clk) begin
    if ( ~ or_dcpl_3 ) begin
      while_if_slc_while_if_acc_sat_29_3 <= while_if_acc_sat_sva_1[29];
    end
  end
  always @(posedge clk) begin
    if ( ~ or_dcpl_3 ) begin
      while_if_while_if_nor_3 <= ~(MUX_v_22_2_2(while_if_nor_3_nl, 22'b1111111111111111111111,
          while_if_and_unfl_sva_1));
    end
  end
  always @(posedge clk) begin
    if ( ~ or_dcpl_3 ) begin
      while_if_while_if_nor_4 <= ~((~((while_if_acc_sat_sva_1[0]) | while_if_nor_ovfl_sva_1))
          | while_if_and_unfl_sva_1);
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      MAC_i_slc_MAC_i_4_0_4_1_itm_2 <= 1'b0;
      while_else_land_lpi_1_dfm_st_2 <= 1'b0;
      while_asn_sft_lpi_1_dfm_st_2 <= 1'b0;
      new_sample_wr_sva <= 1'b0;
      MAC_i_4_0_lpi_1_3_0 <= 4'b0000;
      while_asn_sft_lpi_1_dfm_st_1 <= 1'b0;
      exitL_exit_MAC_lpi_1_dfm <= 1'b0;
      exitL_exitL_exit_MAC_sva <= 1'b1;
      while_stage_0_2 <= 1'b0;
      while_stage_0_3 <= 1'b0;
      while_asn_sft_lpi_1_dfm_2 <= 1'b0;
      lfst_exitL_exit_MAC_lpi_1_dfm_1 <= 1'b0;
      MAC_i_slc_MAC_i_4_0_4_1_itm_1 <= 1'b0;
    end
    else begin
      MAC_i_slc_MAC_i_4_0_4_1_itm_2 <= MAC_i_slc_MAC_i_4_0_4_1_itm_1;
      while_else_land_lpi_1_dfm_st_2 <= while_asn_sft_lpi_1_dfm_2;
      while_asn_sft_lpi_1_dfm_st_2 <= while_asn_sft_lpi_1_dfm_st_1;
      new_sample_wr_sva <= MUX_s_1_2_2(while_while_or_1_nl, while_else_while_else_and_1_nl,
          mux_8_nl);
      MAC_i_4_0_lpi_1_3_0 <= MAC_acc_2_tmp[3:0];
      while_asn_sft_lpi_1_dfm_st_1 <= while_asn_sft_lpi_1_dfm_st_1_mx0;
      exitL_exit_MAC_lpi_1_dfm <= exitL_exit_MAC_lpi_1_dfm_1;
      exitL_exitL_exit_MAC_sva <= exitL_exit_MAC_lpi_1_dfm_1;
      while_stage_0_2 <= 1'b1;
      while_stage_0_3 <= while_stage_0_2;
      while_asn_sft_lpi_1_dfm_2 <= MUX_s_1_2_2(while_asn_sft_lpi_1_dfm_st_1, while_else_land_lpi_1_dfm_mx0w1,
          or_11_nl);
      lfst_exitL_exit_MAC_lpi_1_dfm_1 <= nor_cse;
      MAC_i_slc_MAC_i_4_0_4_1_itm_1 <= MAC_acc_2_tmp[4];
    end
  end
  always @(posedge clk) begin
    while_while_and_itm_1 <= MUX_v_52_2_2(52'b0000000000000000000000000000000000000000000000000000,
        acc_lpi_1_mx0, lfst_exitL_exit_MAC_lpi_1_dfm_1);
    MAC_mul_itm_1 <= $signed(MAC_mux1h_itm_1) * $signed(MAC_mux_8_itm_1);
    acc_lpi_1 <= acc_lpi_1_mx0;
    MAC_mux1h_itm_1 <= MUX_v_24_16_2(coeffs_0, coeffs_1, coeffs_2, coeffs_3, coeffs_4,
        coeffs_5, coeffs_6, coeffs_7, coeffs_8, coeffs_9, coeffs_10, coeffs_11, coeffs_12,
        coeffs_13, coeffs_14, coeffs_15, MAC_i_4_0_lpi_1_dfm_3_0_1);
    MAC_mux_8_itm_1 <= MUX_v_24_16_2(while_mux_43_nl, while_mux_44_nl, while_mux_45_nl,
        while_mux_3_nl, while_mux_4_nl, while_mux_5_nl, while_mux_6_nl, while_mux_7_nl,
        while_mux_8_nl, while_mux_9_nl, while_mux_10_nl, while_mux_11_nl, while_mux_12_nl,
        while_mux_13_nl, while_mux_14_nl, while_mux_15_nl, MAC_i_4_0_lpi_1_dfm_3_0_1);
  end
  always @(posedge clk) begin
    if ( rst ) begin
      taps_0_sva <= 24'b000000000000000000000000;
    end
    else if ( ~ mux_tmp_9 ) begin
      taps_0_sva <= data_in;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      taps_1_sva <= 24'b000000000000000000000000;
    end
    else if ( ~ mux_tmp_9 ) begin
      taps_1_sva <= taps_0_sva;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      taps_2_sva <= 24'b000000000000000000000000;
    end
    else if ( ~ mux_tmp_9 ) begin
      taps_2_sva <= taps_1_sva;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      taps_3_sva <= 24'b000000000000000000000000;
    end
    else if ( ~ mux_tmp_9 ) begin
      taps_3_sva <= taps_2_sva;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      taps_4_sva <= 24'b000000000000000000000000;
    end
    else if ( ~ mux_tmp_9 ) begin
      taps_4_sva <= taps_3_sva;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      taps_5_sva <= 24'b000000000000000000000000;
    end
    else if ( ~ mux_tmp_9 ) begin
      taps_5_sva <= taps_4_sva;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      taps_6_sva <= 24'b000000000000000000000000;
    end
    else if ( ~ mux_tmp_9 ) begin
      taps_6_sva <= taps_5_sva;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      taps_7_sva <= 24'b000000000000000000000000;
    end
    else if ( ~ mux_tmp_9 ) begin
      taps_7_sva <= taps_6_sva;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      taps_8_sva <= 24'b000000000000000000000000;
    end
    else if ( ~ mux_tmp_9 ) begin
      taps_8_sva <= taps_7_sva;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      taps_9_sva <= 24'b000000000000000000000000;
    end
    else if ( ~ mux_tmp_9 ) begin
      taps_9_sva <= taps_8_sva;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      taps_10_sva <= 24'b000000000000000000000000;
    end
    else if ( ~ mux_tmp_9 ) begin
      taps_10_sva <= taps_9_sva;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      taps_11_sva <= 24'b000000000000000000000000;
    end
    else if ( ~ mux_tmp_9 ) begin
      taps_11_sva <= taps_10_sva;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      taps_12_sva <= 24'b000000000000000000000000;
    end
    else if ( ~ mux_tmp_9 ) begin
      taps_12_sva <= taps_11_sva;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      taps_13_sva <= 24'b000000000000000000000000;
    end
    else if ( ~ mux_tmp_9 ) begin
      taps_13_sva <= taps_12_sva;
    end
  end
  always @(posedge clk) begin
    if ( rst ) begin
      taps_14_sva <= 24'b000000000000000000000000;
    end
    else if ( ~ mux_tmp_9 ) begin
      taps_14_sva <= taps_13_sva;
    end
  end
  always @(posedge clk) begin
    if ( ~ nor_cse ) begin
      taps_15_lpi_1_dfm_1 <= taps_14_sva;
    end
  end
  assign while_if_nor_3_nl = ~(MUX_v_22_2_2((while_if_acc_sat_sva_1[22:1]), 22'b1111111111111111111111,
      while_if_nor_ovfl_sva_1));
  assign while_while_or_1_nl = new_sample_wr_sva | (~ nor_cse);
  assign while_else_while_else_and_1_nl = new_sample_wr_sva & (~ while_else_land_lpi_1_dfm_mx0w1);
  assign mux_8_nl = MUX_s_1_2_2(nand_2_cse, or_tmp, exitL_exitL_exit_MAC_sva);
  assign or_11_nl = nand_2_cse | or_dcpl_4;
  assign while_mux_43_nl = MUX_v_24_2_2(data_in, taps_0_sva, nor_cse);
  assign while_mux_44_nl = MUX_v_24_2_2(taps_0_sva, taps_1_sva, nor_cse);
  assign while_mux_45_nl = MUX_v_24_2_2(taps_1_sva, taps_2_sva, nor_cse);
  assign while_mux_3_nl = MUX_v_24_2_2(taps_2_sva, taps_3_sva, nor_cse);
  assign while_mux_4_nl = MUX_v_24_2_2(taps_3_sva, taps_4_sva, nor_cse);
  assign while_mux_5_nl = MUX_v_24_2_2(taps_4_sva, taps_5_sva, nor_cse);
  assign while_mux_6_nl = MUX_v_24_2_2(taps_5_sva, taps_6_sva, nor_cse);
  assign while_mux_7_nl = MUX_v_24_2_2(taps_6_sva, taps_7_sva, nor_cse);
  assign while_mux_8_nl = MUX_v_24_2_2(taps_7_sva, taps_8_sva, nor_cse);
  assign while_mux_9_nl = MUX_v_24_2_2(taps_8_sva, taps_9_sva, nor_cse);
  assign while_mux_10_nl = MUX_v_24_2_2(taps_9_sva, taps_10_sva, nor_cse);
  assign while_mux_11_nl = MUX_v_24_2_2(taps_10_sva, taps_11_sva, nor_cse);
  assign while_mux_12_nl = MUX_v_24_2_2(taps_11_sva, taps_12_sva, nor_cse);
  assign while_mux_13_nl = MUX_v_24_2_2(taps_12_sva, taps_13_sva, nor_cse);
  assign while_mux_14_nl = MUX_v_24_2_2(taps_13_sva, taps_14_sva, nor_cse);
  assign while_mux_15_nl = MUX_v_24_2_2(taps_14_sva, taps_15_lpi_1_dfm_1, nor_cse);

  function automatic  MUX_s_1_2_2;
    input  input_0;
    input  input_1;
    input  sel;
    reg  result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_s_1_2_2 = result;
  end
  endfunction


  function automatic [21:0] MUX_v_22_2_2;
    input [21:0] input_0;
    input [21:0] input_1;
    input  sel;
    reg [21:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_22_2_2 = result;
  end
  endfunction


  function automatic [23:0] MUX_v_24_16_2;
    input [23:0] input_0;
    input [23:0] input_1;
    input [23:0] input_2;
    input [23:0] input_3;
    input [23:0] input_4;
    input [23:0] input_5;
    input [23:0] input_6;
    input [23:0] input_7;
    input [23:0] input_8;
    input [23:0] input_9;
    input [23:0] input_10;
    input [23:0] input_11;
    input [23:0] input_12;
    input [23:0] input_13;
    input [23:0] input_14;
    input [23:0] input_15;
    input [3:0] sel;
    reg [23:0] result;
  begin
    case (sel)
      4'b0000 : begin
        result = input_0;
      end
      4'b0001 : begin
        result = input_1;
      end
      4'b0010 : begin
        result = input_2;
      end
      4'b0011 : begin
        result = input_3;
      end
      4'b0100 : begin
        result = input_4;
      end
      4'b0101 : begin
        result = input_5;
      end
      4'b0110 : begin
        result = input_6;
      end
      4'b0111 : begin
        result = input_7;
      end
      4'b1000 : begin
        result = input_8;
      end
      4'b1001 : begin
        result = input_9;
      end
      4'b1010 : begin
        result = input_10;
      end
      4'b1011 : begin
        result = input_11;
      end
      4'b1100 : begin
        result = input_12;
      end
      4'b1101 : begin
        result = input_13;
      end
      4'b1110 : begin
        result = input_14;
      end
      default : begin
        result = input_15;
      end
    endcase
    MUX_v_24_16_2 = result;
  end
  endfunction


  function automatic [23:0] MUX_v_24_2_2;
    input [23:0] input_0;
    input [23:0] input_1;
    input  sel;
    reg [23:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_24_2_2 = result;
  end
  endfunction


  function automatic [3:0] MUX_v_4_2_2;
    input [3:0] input_0;
    input [3:0] input_1;
    input  sel;
    reg [3:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_4_2_2 = result;
  end
  endfunction


  function automatic [51:0] MUX_v_52_2_2;
    input [51:0] input_0;
    input [51:0] input_1;
    input  sel;
    reg [51:0] result;
  begin
    case (sel)
      1'b0 : begin
        result = input_0;
      end
      default : begin
        result = input_1;
      end
    endcase
    MUX_v_52_2_2 = result;
  end
  endfunction


  function automatic [29:0] conv_s2s_29_30 ;
    input [28:0]  vector ;
  begin
    conv_s2s_29_30 = {vector[28], vector};
  end
  endfunction


  function automatic [51:0] conv_s2s_48_52 ;
    input [47:0]  vector ;
  begin
    conv_s2s_48_52 = {{4{vector[47]}}, vector};
  end
  endfunction


  function automatic [29:0] conv_u2s_1_30 ;
    input [0:0]  vector ;
  begin
    conv_u2s_1_30 = {{29{1'b0}}, vector};
  end
  endfunction


  function automatic [4:0] conv_u2s_4_5 ;
    input [3:0]  vector ;
  begin
    conv_u2s_4_5 =  {1'b0, vector};
  end
  endfunction

endmodule

// ------------------------------------------------------------------
//  Design Unit:    top_level
// ------------------------------------------------------------------


module top_level (
  clk, rst, data_in, valid_in, coeffs_0, coeffs_1, coeffs_2, coeffs_3, coeffs_4,
      coeffs_5, coeffs_6, coeffs_7, coeffs_8, coeffs_9, coeffs_10, coeffs_11, coeffs_12,
      coeffs_13, coeffs_14, coeffs_15, data_out, valid_out
);
  input clk;
  input rst;
  input [23:0] data_in;
  input valid_in;
  input [23:0] coeffs_0;
  input [23:0] coeffs_1;
  input [23:0] coeffs_2;
  input [23:0] coeffs_3;
  input [23:0] coeffs_4;
  input [23:0] coeffs_5;
  input [23:0] coeffs_6;
  input [23:0] coeffs_7;
  input [23:0] coeffs_8;
  input [23:0] coeffs_9;
  input [23:0] coeffs_10;
  input [23:0] coeffs_11;
  input [23:0] coeffs_12;
  input [23:0] coeffs_13;
  input [23:0] coeffs_14;
  input [23:0] coeffs_15;
  output [23:0] data_out;
  output valid_out;



  // Interconnect Declarations for Component Instantiations 
  top_level_FIR_FILTER top_level_FIR_FILTER_inst (
      .clk(clk),
      .rst(rst),
      .data_in(data_in),
      .valid_in(valid_in),
      .coeffs_0(coeffs_0),
      .coeffs_1(coeffs_1),
      .coeffs_2(coeffs_2),
      .coeffs_3(coeffs_3),
      .coeffs_4(coeffs_4),
      .coeffs_5(coeffs_5),
      .coeffs_6(coeffs_6),
      .coeffs_7(coeffs_7),
      .coeffs_8(coeffs_8),
      .coeffs_9(coeffs_9),
      .coeffs_10(coeffs_10),
      .coeffs_11(coeffs_11),
      .coeffs_12(coeffs_12),
      .coeffs_13(coeffs_13),
      .coeffs_14(coeffs_14),
      .coeffs_15(coeffs_15),
      .data_out(data_out),
      .valid_out(valid_out)
    );
endmodule



