// ----------------------------------------------------------------------------
// SystemC Wrapper for Catapult Design HDL Netlist
//
//    HLS version: 2022.2_1/1019737 Production Release
//       HLS date: Mon Nov 21 20:05:27 PST 2022
//  Flow Packages: HDL_Tcl 8.0a, SCVerify 10.4
//
//   Generated by: HLS_student@localhost.localdomain
// Generated date: Tue Feb 11 15:19:49 CET 2025
//
// ----------------------------------------------------------------------------
#ifndef INCLUDED_CCS_DUT_WRAPPER_H
#define INCLUDED_CCS_DUT_WRAPPER_H

#ifndef SC_USE_STD_STRING
#define SC_USE_STD_STRING
#endif

#include <systemc.h>
#include <mc_simulator_extensions.h>

#ifdef CCS_SYSC
namespace HDL {
#endif

#if defined(CCS_DUT_SYSC)

// alias ccs_DUT_wrapper to namespace enclosure of either cycle or RTL SystemC netlist
namespace ccs_design {
#if defined(CCS_DUT_CYCLE)
#include "cycle.cxx"
#else
#if defined(CCS_DUT_RTL)
#include "rtl.cxx"
#endif
#endif
}
typedef ccs_design::HDL::top_level ccs_DUT_wrapper;

#else

// Create a foreign module wrapper around the HDL
#ifdef VCS_SYSTEMC
// VCS support - ccs_DUT_wrapper is derived from VCS-generated SystemC wrapper around HDL code

class ccs_DUT_wrapper : public TOP_HDL_ENTITY
{
public:
   ccs_DUT_wrapper(const sc_module_name& nm, const char *hdl_name)
      : TOP_HDL_ENTITY(nm)
      {
         //elaborate_foreign_module(hdl_name);
      }
   
   ~ccs_DUT_wrapper() {}
};

#else
// non VCS simulators - ccs_DUT_wrapper is derived from mc_foreign_module (adding 2nd ctor arg)

class ccs_DUT_wrapper : public mc_foreign_module
{
public:
   #ifndef VCS_SYSTEMC
   // Interface Ports
   sc_in<bool> clk;
   sc_in< sc_logic > rst;
   sc_in< sc_lv<24> > data_in;
   sc_in< sc_logic > valid_in;
   sc_in< sc_lv<24> > coeffs_0;
   sc_in< sc_lv<24> > coeffs_1;
   sc_in< sc_lv<24> > coeffs_2;
   sc_in< sc_lv<24> > coeffs_3;
   sc_in< sc_lv<24> > coeffs_4;
   sc_in< sc_lv<24> > coeffs_5;
   sc_in< sc_lv<24> > coeffs_6;
   sc_in< sc_lv<24> > coeffs_7;
   sc_in< sc_lv<24> > coeffs_8;
   sc_in< sc_lv<24> > coeffs_9;
   sc_in< sc_lv<24> > coeffs_10;
   sc_in< sc_lv<24> > coeffs_11;
   sc_in< sc_lv<24> > coeffs_12;
   sc_in< sc_lv<24> > coeffs_13;
   sc_in< sc_lv<24> > coeffs_14;
   sc_in< sc_lv<24> > coeffs_15;
   sc_out< sc_lv<24> > data_out;
   sc_out< sc_logic > valid_out;
   #endif
   
public:
   ccs_DUT_wrapper(const sc_module_name& nm, const char *hdl_name)
      : mc_foreign_module(nm,hdl_name)
      #ifndef VCS_SYSTEMC
      ,clk("clk")
      ,rst("rst")
      ,data_in("data_in")
      ,valid_in("valid_in")
      ,coeffs_0("coeffs_0")
      ,coeffs_1("coeffs_1")
      ,coeffs_2("coeffs_2")
      ,coeffs_3("coeffs_3")
      ,coeffs_4("coeffs_4")
      ,coeffs_5("coeffs_5")
      ,coeffs_6("coeffs_6")
      ,coeffs_7("coeffs_7")
      ,coeffs_8("coeffs_8")
      ,coeffs_9("coeffs_9")
      ,coeffs_10("coeffs_10")
      ,coeffs_11("coeffs_11")
      ,coeffs_12("coeffs_12")
      ,coeffs_13("coeffs_13")
      ,coeffs_14("coeffs_14")
      ,coeffs_15("coeffs_15")
      ,data_out("data_out")
      ,valid_out("valid_out")
      #endif
      {
          elaborate_foreign_module(hdl_name);
      }
      
      ~ccs_DUT_wrapper() {}
   };
   #endif
   
   #endif

#endif

#ifdef CCS_SYSC
} // end namespace HDL
#endif

