// ----------------------------------------------------------------------------
// SystemC SCVerify Flow -- sysc_sim.h
//
//    HLS version: 2022.2_1/1019737 Production Release
//       HLS date: Mon Nov 21 20:05:27 PST 2022
//  Flow Packages: HDL_Tcl 8.0a, SCVerify 10.4
//
//   Generated by: HLS_student@localhost.localdomain
// Generated date: Tue Feb 11 15:19:49 CET 2025
//
// ----------------------------------------------------------------------------
#ifndef INCLUDED_SYSC_SIM_WRAPPER_H
#define INCLUDED_SYSC_SIM_WRAPPER_H
// 
// -------------------------------------
// sysc_sim_wrapper
// Represents a new SC_MODULE having the same interface as the original model top_level
// -------------------------------------
// 

#ifndef TO_QUOTED_STRING
#define TO_QUOTED_STRING(x) TO_QUOTED_STRING1(x)
#define TO_QUOTED_STRING1(x) #x
#endif
extern double __scv_hold_time;


#ifndef SC_USE_STD_STRING
#define SC_USE_STD_STRING
#endif

#include "../../FIR_FILTER.h"
#include <systemc.h>
#include <mc_stall_ctrl.h>
#include <mc_scv_trans.h>
#include "mc_dut_wrapper.h"


namespace CCS_RTL {
   class sysc_sim_wrapper : public sc_module
   {
   public:
      // Module instance pointers
      HDL::ccs_DUT_wrapper ccs_rtl;
      
      // Interface Ports
      sc_core::sc_in<bool > clk;
      sc_core::sc_in<bool > rst;
      sc_core::sc_in<ac_fixed<24, 24, true, AC_RND_INF, AC_SAT > > data_in;
      sc_core::sc_in<bool > valid_in;
      sc_core::sc_in<ac_fixed<24, 1, true, AC_RND_INF, AC_SAT > > coeffs[16];
      sc_core::sc_out<ac_fixed<24, 24, true, AC_RND_INF, AC_SAT > > data_out;
      sc_core::sc_out<bool > valid_out;
      
      // Named Objects
      
      // Data objects
      sc_signal< bool >                          ccs_rtl_SIG_clk;
      sc_signal< sc_logic >                      ccs_rtl_SIG_rst;
      sc_signal< sc_lv<24> >                     ccs_rtl_SIG_data_in;
      sc_signal< sc_logic >                      ccs_rtl_SIG_valid_in;
      sc_signal< sc_lv<24> >                     ccs_rtl_SIG_coeffs_0;
      sc_signal< sc_lv<24> >                     ccs_rtl_SIG_coeffs_1;
      sc_signal< sc_lv<24> >                     ccs_rtl_SIG_coeffs_2;
      sc_signal< sc_lv<24> >                     ccs_rtl_SIG_coeffs_3;
      sc_signal< sc_lv<24> >                     ccs_rtl_SIG_coeffs_4;
      sc_signal< sc_lv<24> >                     ccs_rtl_SIG_coeffs_5;
      sc_signal< sc_lv<24> >                     ccs_rtl_SIG_coeffs_6;
      sc_signal< sc_lv<24> >                     ccs_rtl_SIG_coeffs_7;
      sc_signal< sc_lv<24> >                     ccs_rtl_SIG_coeffs_8;
      sc_signal< sc_lv<24> >                     ccs_rtl_SIG_coeffs_9;
      sc_signal< sc_lv<24> >                     ccs_rtl_SIG_coeffs_10;
      sc_signal< sc_lv<24> >                     ccs_rtl_SIG_coeffs_11;
      sc_signal< sc_lv<24> >                     ccs_rtl_SIG_coeffs_12;
      sc_signal< sc_lv<24> >                     ccs_rtl_SIG_coeffs_13;
      sc_signal< sc_lv<24> >                     ccs_rtl_SIG_coeffs_14;
      sc_signal< sc_lv<24> >                     ccs_rtl_SIG_coeffs_15;
      sc_signal< sc_lv<24> >                     ccs_rtl_SIG_data_out;
      sc_signal< sc_logic >                      ccs_rtl_SIG_valid_out;
      
      // Declare processes (SC_METHOD and SC_THREAD)
      void update_proc();
      
      // Constructor
      SC_HAS_PROCESS(sysc_sim_wrapper);
      sysc_sim_wrapper(
         const sc_module_name& nm
      )
         : ccs_rtl(
            "ccs_rtl",
            TO_QUOTED_STRING(TOP_HDL_ENTITY)
         )
         , clk("clk")
         , rst("rst")
         , data_in("data_in")
         , valid_in("valid_in")
         , coeffs()
         , data_out("data_out")
         , valid_out("valid_out")
         , ccs_rtl_SIG_clk("ccs_rtl_SIG_clk")
         , ccs_rtl_SIG_rst("ccs_rtl_SIG_rst")
         , ccs_rtl_SIG_data_in("ccs_rtl_SIG_data_in")
         , ccs_rtl_SIG_valid_in("ccs_rtl_SIG_valid_in")
         , ccs_rtl_SIG_coeffs_0("ccs_rtl_SIG_coeffs_0")
         , ccs_rtl_SIG_coeffs_1("ccs_rtl_SIG_coeffs_1")
         , ccs_rtl_SIG_coeffs_2("ccs_rtl_SIG_coeffs_2")
         , ccs_rtl_SIG_coeffs_3("ccs_rtl_SIG_coeffs_3")
         , ccs_rtl_SIG_coeffs_4("ccs_rtl_SIG_coeffs_4")
         , ccs_rtl_SIG_coeffs_5("ccs_rtl_SIG_coeffs_5")
         , ccs_rtl_SIG_coeffs_6("ccs_rtl_SIG_coeffs_6")
         , ccs_rtl_SIG_coeffs_7("ccs_rtl_SIG_coeffs_7")
         , ccs_rtl_SIG_coeffs_8("ccs_rtl_SIG_coeffs_8")
         , ccs_rtl_SIG_coeffs_9("ccs_rtl_SIG_coeffs_9")
         , ccs_rtl_SIG_coeffs_10("ccs_rtl_SIG_coeffs_10")
         , ccs_rtl_SIG_coeffs_11("ccs_rtl_SIG_coeffs_11")
         , ccs_rtl_SIG_coeffs_12("ccs_rtl_SIG_coeffs_12")
         , ccs_rtl_SIG_coeffs_13("ccs_rtl_SIG_coeffs_13")
         , ccs_rtl_SIG_coeffs_14("ccs_rtl_SIG_coeffs_14")
         , ccs_rtl_SIG_coeffs_15("ccs_rtl_SIG_coeffs_15")
         , ccs_rtl_SIG_data_out("ccs_rtl_SIG_data_out")
         , ccs_rtl_SIG_valid_out("ccs_rtl_SIG_valid_out")
      {
         // Instantiate other modules
         ccs_rtl.clk(ccs_rtl_SIG_clk);
         ccs_rtl.rst(ccs_rtl_SIG_rst);
         ccs_rtl.data_in(ccs_rtl_SIG_data_in);
         ccs_rtl.valid_in(ccs_rtl_SIG_valid_in);
         ccs_rtl.coeffs_0(ccs_rtl_SIG_coeffs_0);
         ccs_rtl.coeffs_1(ccs_rtl_SIG_coeffs_1);
         ccs_rtl.coeffs_2(ccs_rtl_SIG_coeffs_2);
         ccs_rtl.coeffs_3(ccs_rtl_SIG_coeffs_3);
         ccs_rtl.coeffs_4(ccs_rtl_SIG_coeffs_4);
         ccs_rtl.coeffs_5(ccs_rtl_SIG_coeffs_5);
         ccs_rtl.coeffs_6(ccs_rtl_SIG_coeffs_6);
         ccs_rtl.coeffs_7(ccs_rtl_SIG_coeffs_7);
         ccs_rtl.coeffs_8(ccs_rtl_SIG_coeffs_8);
         ccs_rtl.coeffs_9(ccs_rtl_SIG_coeffs_9);
         ccs_rtl.coeffs_10(ccs_rtl_SIG_coeffs_10);
         ccs_rtl.coeffs_11(ccs_rtl_SIG_coeffs_11);
         ccs_rtl.coeffs_12(ccs_rtl_SIG_coeffs_12);
         ccs_rtl.coeffs_13(ccs_rtl_SIG_coeffs_13);
         ccs_rtl.coeffs_14(ccs_rtl_SIG_coeffs_14);
         ccs_rtl.coeffs_15(ccs_rtl_SIG_coeffs_15);
         ccs_rtl.data_out(ccs_rtl_SIG_data_out);
         ccs_rtl.valid_out(ccs_rtl_SIG_valid_out);
         
         
         // Register processes
         SC_METHOD(update_proc);
         sensitive  << clk << rst << data_in << valid_in << coeffs[0] << coeffs[1] << coeffs[2] << coeffs[3] << coeffs[4] << coeffs[5] << coeffs[6] << coeffs[7] << coeffs[8] << coeffs[9] << coeffs[10] << coeffs[11] << coeffs[12] << coeffs[13] << coeffs[14] << coeffs[15] << ccs_rtl_SIG_data_out << ccs_rtl_SIG_valid_out;
         // Other constructor statements
      }
      
      ~sysc_sim_wrapper()
      {
      }
      
      // C++ class functions
   };
} // end namespace CCS_RTL
#endif //INCLUDED_SYSC_SIM_WRAPPER_H
